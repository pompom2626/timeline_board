{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dolistId","userId","App","props","onclickUserList","state","userList","userNames","length","alert","userNamesContent","id","name","newuserList","map","push","setState","onclickAddList","docontents","doitList","doInputContent","completedDecision","date","Date","newdoitList","onchangeUserNames","e","target","value","onchangeDoContents","onclickStateChange","index","onclickRemoveButton","filter","item","selectedOptionKey","this","className","style","maxWidth","padding","type","placeholder","onChange","onKeyDown","keyCode","onClick","marginTop","Fragment","float","src","alt","key","margin","marginRight","whiteSpace","toLocaleDateString","toLocaleTimeString","marginLeft","CancelButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c996ba1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Image from 'react-image-resizer';\n\n//increas do list items\nlet dolistId = 0;\nlet userId = 0;\n\n//img id and reference addr\n/* https://loremflickr.com/320/240?random=1 */\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      doitList: [],\n      docontents: '',\n      userList: [],\n      userNames: '',\n      selectedOptionKey: \"\"\n    }\n  }\n\n  onclickUserList = () => {\n    const { userList, userNames } = this.state\n    if (userNames.length === 0) return alert('Please, input user name')\n    const userNamesContent = {\n      id: userId++,\n      name: userNames\n    }\n\n    const newuserList = userList.map((userList) => {\n      return userList\n    });\n    newuserList.push(userNamesContent)\n    this.setState({ userList: newuserList })\n  }\n\n  onclickAddList = () => {\n    const { docontents, doitList } = this.state\n\n    if (docontents.length === 0) return alert('Please, Input to do things')\n    const doInputContent = {\n      id: dolistId++,\n      name: docontents,\n      completedDecision: true,\n      date: new Date(),\n      /*  user: this.userNames[0] */\n    }\n    const newdoitList = doitList.map((doitList) => {\n      return doitList\n    });\n    newdoitList.push(doInputContent)\n    this.setState({ doitList: newdoitList })\n  }\n\n  onchangeUserNames = (e) => {\n    this.setState({ userNames: e.target.value })\n  }\n\n  onchangeDoContents = (e) => {\n    this.setState({ docontents: e.target.value })\n  }\n\n  onclickStateChange = (index) => {\n    const { doitList } = this.state;\n\n\n    const newdoitList = doitList.map((doitList) => {\n      return doitList\n    });\n    if (doitList[index].completedDecision === false) {\n      newdoitList[index].completedDecision = true\n    } else {\n      newdoitList[index].completedDecision = false\n    }\n\n    this.setState({ doitList: newdoitList })\n  }\n\n  onclickRemoveButton = (id) => {\n    const { doitList } = this.state\n    const newdoitList = doitList.filter(item => item.id !== id)\n    this.setState({ doitList: newdoitList })\n  }\n\n  render() {\n    const { selectedOptionKey } = this.state;\n\n    const CancelButton = item => (\n      <button\n        // className='btn btn-warning btn-sm'\n        style={{ marginLeft: 10 }}\n        onClick={() => this.onclickRemoveButton(item.id)}\n      >\n        Delete\n      </button>\n    )\n\n    return (\n\n      <div className='container' style={{ maxWidth: 600, padding: '20px 0' }}>\n        <div className='row'>\n          <div className='col text-center'>\n            <div className='input-group'>\n\n              <input\n                type='text'\n                className='form-control'\n                placeholder='Input user name'\n                value={this.state.userNames}\n                onChange={this.onchangeUserNames}\n                onKeyDown={e => e.keyCode === 13 ? this.onclickUserList() : null}\n              />\n              <div className='input-group-append'>\n                <button\n                  className='btn btn-default'\n                  onClick={this.onclickUserList}\n                >\n                  Submit\n                </button>\n              </div>\n            </div>\n\n\n            <div className='input-group'>\n\n              <input\n                type='text'\n                className='form-control'\n                placeholder='Input do-it list'\n                value={this.state.docontents}\n                onChange={this.onchangeDoContents}\n                onKeyDown={e => e.keyCode === 13 ? this.onclickAddList() : null}\n              />\n              <div className='input-group-append'>\n                <button\n                  className='btn btn-default'\n                  onClick={this.onclickAddList}\n                >\n                  Submit\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='row' style={{ marginTop: 20 }}>\n\n          <div /* className='col-6' */ >\n            <h3> </h3>\n           \n            {\n              \n              this.state.doitList.filter(item => item.completedDecision).map(item =>\n                   \n              /*   this.state.userList.map(item2 => */\n                       <React.Fragment> \n                <div /* key={item2.id} */ style={{float:'left'}}>\n                <img\n                src={`https://loremflickr.com/70/70?random=1`}\n               /* height={10}\n               width={10} */  alt=\"users\" />\n               </div>\n                {/*   ) */}\n                 \n                <div key={item.id} style={{ margin: 10 }} >\n                  <p style={{ marginRight: 5, whiteSpace: \"pre-wrap\" }}>-{item.date.toLocaleDateString('en-US')} {item.date.toLocaleTimeString('en-US')} {\"\\n\"} {item.name} </p>\n                  {CancelButton(item)}\n                </div>\n                </React.Fragment>\n              )\n              \n            }\n            \n          </div>\n          \n        </div>\n        \n        <div className='col-6'>\n          <h3>Users</h3>\n          <select onChange={this.onchangeUserNames}>\n            <option>Choose</option>\n            {\n              this.state.userList/* .filter(item => !item.completedDecision) */.map(item =>\n                <option key={item.id} style={{ margin: 10, marginRight: 5 }}>\n                  -{item.name} {\"\\n\"} {/* {item.image} */}</option>\n\n              )\n            }\n          </select>\n        </div>\n\n      </div>\n\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}